#!/usr/bin/env bash
#
# setup-hooks
#
# Description:
# This script configures Git hooks for a repository. It checks if the repository is correctly set up,
# ensures that hooks are executable, and configures Git to use hooks from a specified directory.
# The default directory for the git hooks is 'qa/hooks'.
#
# Usage:
# ./setup-hooks [optional-config-type]
#
# Arguments:
#   optional-config-type  Type of the repository. This can either be 'submodule' (default) or 'repository'
#
# Requirements:
#   - Git must be installed
#   - The repository must be a Git repository
#
# Example:
# ./setup-hooks repository   # Configures the script so it functions for the standalone 'qa' repository.
#

# Enable strict error handling:
# - 'set -e' causes the script to exit immediately if any command fails (non-zero exit status).
# - 'set -u' causes the script to exit if any variable is used before being set.
# - 'set -o pipefail' ensures that the script exits if any command in a pipeline fails, not just the last one.
set -euo pipefail

config_type="submodule"
# Check if an argument is passed
if [ $# -gt 0 ]; then
    # Validate input argument
    if [ "$1" == "repository" ]; then
        config_type="repository"
    elif [ "$1" != "submodule" ]; then
        # Can't use the 'fail' function from 'utils/logging' as it hasn't been sourced yet
        echo "Invalid input. Only 'submodule' (default) or 'repository' are allowed."
        exit 1
    fi
fi

# Default config directory for git hooks
qa_config_dir="qa/hooks"
if [ "$config_type" == "repository" ]; then
    qa_config_dir="hooks"
fi

echo "Starting the 'setup-hooks' script"

# Get the root directory of the Git repository
repo_root=$(git rev-parse --show-toplevel)
# Load util scripts from the utils/ directory
if [ "$config_type" == "repository" ]; then
    source "$repo_root/utils/logging"
else
    source "$repo_root/qa/utils/logging"
fi

echo "Checking if 'git' is installed"
if ! command -v git >/dev/null 2>&1; then
    fail "Git is required, but it's not installed."
fi

echo "Checking if the current directory is a git repository"
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    fail "Not in a git repository"
fi

echo "Checking if the git hooks are already configured"
# Try to get the current hooks path; The command returns an error if it is not set, therefore the redirect and the empty string.
current_hooks_path=$(git config --get-all core.hooksPath 2>/dev/null || echo "")
if [ "$current_hooks_path" == "$qa_config_dir" ]; then
    success "Git hooks are already configured to use the $qa_config_dir directory."
    exit 0
else
    echo "Configuring Git to use hooks from '$qa_config_dir' directory..."
    if [ ! -d "./$qa_config_dir" ]; then
        fail "$qa_config_dir directory does not exist. Please check your repository setup."
    fi
    git config core.hooksPath "$qa_config_dir"
    echo "Git hooks path successfully configured."
fi

echo "Configuring Git to ignore changes to file permissions"
git config core.fileMode false
if [ -d "qa/.git" ] || [ -f "qa/.git" ]; then # handles both regular and submodule .git
    echo "Configuring Git in the 'qa' submodule to ignore changes to file permissions"
    (cd qa && git config core.fileMode false)
fi

echo "Ensuring that hook scripts are executable..."
chmod +x ./"$qa_config_dir"/* || {
    fail "Failed to set executable permissions for hook scripts."
}
echo "Hook scripts are now executable."

success "âœ“ Git hooks installed successfully!"
