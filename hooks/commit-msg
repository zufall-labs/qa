#!/usr/bin/env bash
#
# commit-msg
#
# Description:
# This script validates the commit message format according to the Conventional Commit spec.
# It checks if the commit message file exists, validates the message format, checks if the referenced
# issue exists on GitHub, and validates any footers.
#
# Usage:
# This file shouldn't be used directly. Is is used automatically by git, if set up correctly (this is done by the 'setup-hooks' script).
#
# Requirements:
#   - Git must be installed
#   - The repository must be configured with a '.zflbs' file containing configuration values for GitHub.
#   - The commit message should follow the Conventional Commit spec.
#

# Get the root directory of the Git repository
REPO_ROOT=$(git rev-parse --show-toplevel)
readonly REPO_ROOT

# Load util scripts from the utils/ directory
source "$REPO_ROOT/utils/logging"
source "$REPO_ROOT/utils/commit-validation"
source "$REPO_ROOT/utils/load-zflbs-config"

# Load config from '.zflbs' file
load_zflbs_config "$REPO_ROOT"

# Set default GitHub values if not found in config
readonly GITHUB_ORG=${GITHUB_ORG:-"zufall-labs"}
readonly GITHUB_REPO=${GITHUB_REPO:-"your-repo"}
readonly GITHUB_TOKEN=${GITHUB_TOKEN:-""}

# Read commit message from the file passed as argument
msg_file="$1"
if [[ ! -f "$msg_file" ]]; then
    fail "Error: Commit message file not found"
fi
msg=$(cat "$msg_file")

# Validate commit message format
validate_commit_message "$msg"

# Validate issue references
issue_regex="#([0-9]+)"
if [[ $msg =~ $issue_regex ]]; then
    issue_number=${BASH_REMATCH[1]}
    validate_issue_exists "$GITHUB_ORG" "$GITHUB_REPO" "$issue_number" "$issue_regex"
fi

# Validate footers
if [[ $msg =~ $footer_regex ]]; then
    # Split message into lines while preserving whitespace
    while IFS= read -r line; do
        # Skip empty lines and description
        [[ -z "$line" ]] && continue
        [[ $line =~ $commit_regex ]] && continue
        validate_footer "$line"
    done <<<"$msg"
fi

success "âœ“ Commit message follows Conventional Commit spec"
exit 0
